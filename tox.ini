[tox]
minversion = 3.21
# relies on the correct version of Python installed
envlist = ruff,tests-core,tests-all,mypy-core,ty-core,mypy-all,ty-all
# NOTE: we don't run end2end by default since it requires elaborate setup
# https://github.com/tox-dev/tox/issues/20#issuecomment-247788333
# hack to prevent .tox from crapping to the project directory
toxworkdir = {env:TOXWORKDIR_BASE:}{toxinidir}/.tox

[testenv]
# TODO how to get package name from setuptools?
package_name = "promnesia"
pass_env =
# useful for tests to know they are running under ci
    CI
    CI_*
# respect user's cache dirs to prevent tox from crapping into project dir
    PYTHONPYCACHEPREFIX
    MYPY_CACHE_DIR
    RUFF_CACHE_DIR
#
    MY_CONFIG
    # by default we don't run browser tests to avoid confusing people when they run locally
    # but we want them on CI, so we allow to pass through the variable when we do want to run them
    WITH_BROWSER_TESTS
    # todo ugh this is all so confusing... need to simplify

set_env =
# do not add current working directory to pythonpath
# generally this is more robust and safer, prevents weird issues later on
    PYTHONSAFEPATH=1

# default is 'editable', in which tox builds wheel first for some reason? not sure if makes much sense
package = uv-editable


[testenv:ruff]
skip_install = true
dependency_groups = testing
commands =
    {envpython} -m ruff check \
        {posargs}


# just the very core tests with minimal dependencies
[testenv:tests-core]
dependency_groups = testing
commands =
    # posargs allow test filtering, e.g. tox ... -- -k test_name
    {envpython} -m pytest \
        --pyargs {[testenv]package_name}     \
        # note: sources are tested in tests-all
        --ignore src/promnesia/sources       \
        --ignore src/promnesia/tests/sources \
        {posargs}


[testenv:tests-all]
dependency_groups = testing-all
commands =
    # used in some tests
    {envpython} -m my.core module install \
        my.google.takeout.parser \
        my.hypothesis
    {envpython} -m pytest \
        --pyargs {[testenv]package_name}     \
        {posargs}


[testenv:end2end]
set_env =
    {[testenv]set_env}
    WITH_BROWSER_TESTS=true
    PYTEST_TIMEOUT=120
dependency_groups = testing-end2end
commands =
    {envpython} -m my.core module install my.hypothesis
    {envpython} -m pytest     \
        # TODO noconftest is hack due to end2end tests being in a separate dir
        # ideally need to just move it inside the package as well
        --noconftest          \
        tests/end2end_test.py \
        {posargs}


[testenv:mypy-core]
dependency_groups = typecheck
commands =
    {envpython} -m mypy --no-install-types \
        # note: sources are tested separately, below
        -p {[testenv]package_name} --exclude 'sources/*' \
        # txt report is a bit more convenient to view on CI
        --txt-report  .coverage.mypy-core  \
        --html-report .coverage.mypy-core  \
        {posargs}


[testenv:ty-core]
# had some weird failures on windows only? skip for now
platform = ^(?!win32).*$
dependency_groups = typecheck
commands =
    {envpython} -m ty \
        check src \
        --exclude '**/sources/' \
        {posargs}


[testenv:typecheck-all_base]
hpi_modules =
    my.browser.export                 \
    my.fbmessenger                    \
    my.github.ghexport                \
    my.google.takeout.parser          \
    my.hypothesis                     \
    my.instapaper                     \
    my.pocket                         \
    my.reddit                         


[testenv:mypy-all]
dependency_groups = typecheck-all
commands =
    {envpython} -m my.core module install {[testenv:typecheck-all_base]hpi_modules}

    {envpython} -m mypy --no-install-types \
        -p {[testenv]package_name} \
        --txt-report           .coverage.mypy-all \
        --html-report          .coverage.mypy-all \
        # this is for github actions to upload to codecov.io
        # sadly xml coverage crashes on windows... so we need to disable it
        {env:CI_MYPY_COVERAGE} \
        {posargs}

    # ugh. a bit crap to run it separately
    # but first will need to move tests inside the package if we want otherwise?
    # and I recall it was problematic at times..
    {envpython} -m mypy --no-install-types \
                   tests --exclude 'testdata/*' \
                   {posargs}

[testenv:ty-all]
dependency_groups = typecheck-all
commands =
    {envpython} -m my.core module install {[testenv:typecheck-all_base]hpi_modules}

    {envpython} -m ty \
        check src/ \
        {posargs}

